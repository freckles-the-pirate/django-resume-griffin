from django.db import models
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _
from django.utils.safestring import mark_safe as ms

from griffin.models import resume
from griffin.models.resume import Resume

import logging
logger = logging.getLogger('griffin')

DOWNLOAD_OVERRIDE_HELP=str("Checking this box will result in Resume Griffin" +
                          " generating a download file using Pandoc")
try:
    import pypandoc
    pypandoc.get_pandoc_formats()
    PANDOC_AVAILABLE=True
except OSError as e:
    logger.warn(e)
    PANDOC_AVAILABLE=False
    DOWNLOAD_OVERRIDE_HELP=str(DOWNLOAD_OVERRIDE_HELP + " <font color='red'>" +
                               "<strong>WARNING: You do not have Pandoc " +
                                "installed. " +
        "Checking this box without setting a file will result " +
        "in an error!</strong></font>")

class DownloadFormat(models.Model):
    extension = models.CharField(max_length=5,
            help_text=_('The file extension for the format (e.g. ".docx")')
        )
    description = models.CharField(max_length=200,
            help_text=_('Description for the file format, ' +
                'used for download links.')
        )
            
    def __unicode__(self):
        return u'%s (%s)'%(self.description, self.extension)
            
    class Meta:
        verbose_name = "Download Format"
        verbose_name_plural = "Download Formats"

class ResumeDownload(models.Model):
    resume = models.ForeignKey('Resume')
    format = models.ForeignKey('DownloadFormat')
    resume_file = models.FileField(
            help_text=_("A file to use for downloading. If not found, then " +
                        " Resume Griffin will attempt to use DocUtils."
                        ),
            blank=True,
            null=True,
        )
    use_autogenerated_file = models.BooleanField(
        help_text=_(ms(DOWNLOAD_OVERRIDE_HELP)),
        default=PANDOC_AVAILABLE,
        verbose_name='Use Auto-generated File',
        )
            
    def __unicode__(self):
        return "%s <%s>"%(self.resume, self.format)
    
    def get_absolute_url(self):
        return reverse('resume_download', kwargs={
            'resume_id' : self.resume.pk,
            'extension' : self.format.extension}
        )
    
    def as_link_item(self, before='<li>', after='</li>'):
        html_sep = [
            before,
            '<a href="%s">%s</a>'%(self.get_absolute_url(), self.format),
            after,
        ]
        return '\n'.join(html_sep)
