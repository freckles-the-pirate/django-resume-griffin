if __name__ == '__main__' and __package__ is None:
    from os import sys, path
    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

from django import test as unittest
from django.contrib.auth.models import User, UserManager

from unittest import skip
from datetime import date

import logging, pprint, os
logger = logging.getLogger(__file__)

from griffin.models.contactfield import *
from griffin.models.entity import *
from griffin.models.resume import *
from griffin.models.attendance import *
from griffin.models.download import *

from django.test import Client
from django.core.urlresolvers import reverse
from asena import models as asena_models

import os
RESUME_FILE=os.path.abspath(
    os.path.join(
        os.path.dirname(__file__),
        'docs',
        'testresume.odt',
    )
)

class TestViews(unittest.TestCase):
    def setUp(self):
        import django
        django.setup()
        self.client = Client()
        
        self.user = User.objects.create() 
        self.user.username='test_user'

        self.person = Person.objects.create(first_name='Simon',
                last_name='Willison')

        self.applicant = Applicant.objects.create(first_name='Simon',
                last_name='Willison', user=self.user)
        
        self.resume = Resume.objects.create(applicant=self.applicant,
                objective="To test a resume!")
        
        self.format_html = DownloadFormat.objects.create(
                description='HTML',
                extension='html'
            )
        self.format_odt = DownloadFormat.objects.create(
                description='LibreOffice Document',
                extension='odt'
            )
        self.download_html = ResumeDownload.objects.create(resume=self.resume,
                                                           format=self.format_html)
        self.download_odt = ResumeDownload.objects.create(resume=self.resume,
                                                          format=self.format_odt,
                                                          resume_file=RESUME_FILE,
                                                          use_autogenerated_file=False)
        self.token_set = asena_models.TokenSet.generate_set(1)
        self.token = asena_models.Token.objects.filter(token_set=self.token_set)[0]

    @skip("for now")
    def test_index(self):
        response = self.client.get(reverse('index'))
        self.assertEquals(response.status_code, 200)
        
    def test_good_html_download(self):
        from griffin.views.resume import download
        
        kwargs = {'resume_id' : self.resume.pk, 'extension' : 'html', }
        url = reverse('resume_download', kwargs=kwargs)
        url = '%s?token=%s'%(url,self.token.value)
        logger.debug("Getting URL %s"%url)
        
        response = self.client.get(url)
        logger.info(response.reason_phrase)
        
        self.assertEqual(response.status_code, 302)
        
    def test_good_odt_download(self):
        from griffin.views.resume import download
        
        kwargs = {'resume_id' : self.resume.pk, 'extension' : 'odt', }
        url = reverse('resume_download', kwargs=kwargs)
        url = '%s?token=%s'%(url,self.token.value)
        
        logger.debug("Getting URL %s"%url)
        
        response = self.client.get(url)
        logger.info(response.reason_phrase)
        logger.info(response.content)
        
        # Expect a redirect.
        self.assertEqual(response.status_code, 302)
        
    def test_bad_download(self):
        from griffin.views.resume import download
        kwargs = {'resume_id' : self.resume.pk, 'extension' : 'badformat', }
        url = reverse('resume_download', kwargs=kwargs)
        url = '%s?token=%s'%(url,self.token.value)
        logger.debug("Getting URL %s"%url)
        response = self.client.get(url)
        logger.info(response.reason_phrase)
        self.assertEqual(response.status_code, 400)